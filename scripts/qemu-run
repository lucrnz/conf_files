#!/usr/bin/env python3
#needs configobj
#sudo pacman -S python-pip --needed && sudo pip install configobj

# Start Imports
import subprocess
import os
import sys
from configobj import ConfigObj
# End Imports

# Start Functions
def get_disk_format(file_path):
	out = subprocess.check_output(['qemu-img','info', file_path], universal_newlines=True).split()
	prev_was_fmt=False
	result = ""
	for s in out:
		if prev_was_fmt:
			result = s
			break
		else:
			if s == "format:":
				prev_was_fmt = True
	return result
# End Functions
# Start Default config
cfg = {}
vm_dir=os.environ["HOME"]+"/VM/"+sys.argv[1]
cfg["System"] = "x64"
cfg["CpuType"] = "host"
cfg["CpuCores"] = subprocess.check_output(["nproc"])
cfg["MemorySize"] = "2G"
cfg["Acceleration"] = "Yes"
cfg["DisplayDriver"] = "std"
cfg["Boot"] = "c"
cfg["ForwardPorts"] = ""
cfg["RandomDevice"] = "Yes"

if os.path.isfile(vm_dir + "/cdrom.iso"):
	cfg["CDRomISO"] = vm_dir + "/cdrom.iso"
if os.path.isfile(vm_dir + "/disk.qcow2"):
	cfg["HardDisk"] = vm_dir + "/disk.qcow2"
# End Default Config
# Start Load Config File
vm_cfg_file_path = vm_dir + "/config"
if os.path.isfile(vm_cfg_file_path):
	vm_cfg_file = ConfigObj(vm_cfg_file_path)
	for k, v in vm_cfg_file.items():
		cfg[k] = v
# End Load Config File
# Start QEMU CMD Line
qemu_cmd = []

if cfg["System"] == "x32":
	qemu_cmd.append("qemu-system-i386")
elif cfg["System"] == "x64":
	qemu_cmd.append("qemu-system-x86_64")

if cfg["Acceleration"].lower() == "yes":
	qemu_cmd.append("--enable-kvm")

qemu_cmd += ["-cpu", cfg["CpuType"] ,"-smp", cfg["CpuCores"], "-m", cfg["MemorySize"], "-boot", "order="+ cfg["Boot"], "-usb", "-device", "usb-tablet"]

if cfg["RandomDevice"].lower() == "yes":
	qemu_cmd += ["-object", "rng-random,id=rng0,filename=/dev/urandom", "-device", "virtio-rng-pci,rng=rng0"]

qemu_cmd += ["-vga", cfg["DisplayDriver"], "-display", "sdl,gl=on", "-monitor", "stdio", "-nic", "user"]
#cfg["ForwardPorts"]

if os.path.isfile(cfg["HardDisk"]):
	qemu_cmd += ["-drive", "file=" + cfg["HardDisk"] + ",format=" + get_disk_format(cfg["HardDisk"])]

if os.path.isfile(cfg["CDRomISO"]):
	qemu_cmd += ["-cdrom", cfg["CDRomISO"]]
# END QEMU CMD Line

#print(qemu_cmd)

qemu_env = os.environ.copy()
qemu_env["SDL_VIDEO_X11_DGAMOUSE"] = "0"

subprocess.Popen(qemu_cmd, env=qemu_env).wait()
